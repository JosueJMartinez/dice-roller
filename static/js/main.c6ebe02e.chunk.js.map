{"version":3,"sources":["components/Die.jsx","components/RollDice.jsx","App.js","serviceWorker.js","index.js"],"names":["Die","props","this","className","number","isClicked","Component","RollDice","state","die1","die2","isMatched","handleClick","e","Math","floor","random","nums","length","setState","setTimeout","onClick","disabled","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRAGqBA,G,6KAEnB,IAAMC,EAAQC,KAAKD,MAEnB,OACC,yBAAKE,UAAU,OACd,uBACCA,UAAS,sBAAiBF,EAAMG,OAAvB,YAAiCH,EAAMI,WAC/C,sB,GAR2BC,cCCZC,G,kNACpBC,MAAQ,CAAEC,KAAM,MAAOC,KAAM,MAAOL,WAAW,EAAOM,WAAW,G,EAKjEC,YAAc,SAAAC,GACb,IAAMJ,EAAOK,KAAKC,MAAMD,KAAKE,SAAW,EAAKf,MAAMgB,KAAKC,QAClDR,EAAOI,KAAKC,MAAMD,KAAKE,SAAW,EAAKf,MAAMgB,KAAKC,QAExD,EAAKC,SAAS,CACbd,WAAW,EACXM,WAAW,IAGZS,YAAW,WACV,OAAIX,IAASC,EACL,EAAKS,SAAS,CACpBV,KAAM,EAAKR,MAAMgB,KAAKR,GACtBC,KAAM,EAAKT,MAAMgB,KAAKP,GACtBL,WAAW,EACXM,WAAW,IAGN,EAAKQ,SAAS,CACpBV,KAAM,EAAKR,MAAMgB,KAAKR,GACtBC,KAAM,EAAKT,MAAMgB,KAAKP,GACtBL,WAAW,MAEV,M,uDAGH,OACC,yBAAKF,UAAU,YACd,yBAAKA,UAAU,oBACd,kBAAC,EAAD,CAAKC,OAAQF,KAAKM,MAAMC,KAAMJ,UAAWH,KAAKM,MAAMH,YACpD,kBAAC,EAAD,CAAKD,OAAQF,KAAKM,MAAME,KAAML,UAAWH,KAAKM,MAAMH,cAEnDH,KAAKM,MAAMG,WACZ,4BACCU,QAASnB,KAAKU,YACdT,UAAU,oBACVmB,SAAUpB,KAAKM,MAAMH,WAEpBH,KAAKM,MAAMH,UAAY,aAAe,iBAGxCH,KAAKM,MAAMG,WAAa,8D,GA/CSL,cAAjBC,EAGbgB,aAAe,CACrBN,KAAM,CAAE,MAAO,MAAO,QAAS,OAAQ,OAAQ,QCIlCO,MARf,WACC,OACC,yBAAKrB,UAAU,OACd,kBAAC,EAAD,QCKiBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6ebe02e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/Die.css';\r\n\r\nexport default class Die extends Component {\r\n\trender() {\r\n\t\tconst props = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Die\">\r\n\t\t\t\t<i\r\n\t\t\t\t\tclassName={`fas fa-dice-${props.number} ${props.isClicked &&\r\n\t\t\t\t\t\t'Die-clicked'}`}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Die from './Die';\r\nimport '../css/RollDice.css';\r\n\r\nexport default class RollDice extends Component {\r\n\tstate = { die1: 'one', die2: 'one', isClicked: false, isMatched: false };\r\n\r\n\tstatic defaultProps = {\r\n\t\tnums: [ 'one', 'two', 'three', 'four', 'five', 'six' ]\r\n\t};\r\n\thandleClick = e => {\r\n\t\tconst die1 = Math.floor(Math.random() * this.props.nums.length);\r\n\t\tconst die2 = Math.floor(Math.random() * this.props.nums.length);\r\n\r\n\t\tthis.setState({\r\n\t\t\tisClicked: true,\r\n\t\t\tisMatched: false\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (die1 === die2) {\r\n\t\t\t\treturn this.setState({\r\n\t\t\t\t\tdie1: this.props.nums[die1],\r\n\t\t\t\t\tdie2: this.props.nums[die2],\r\n\t\t\t\t\tisClicked: false,\r\n\t\t\t\t\tisMatched: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this.setState({\r\n\t\t\t\tdie1: this.props.nums[die1],\r\n\t\t\t\tdie2: this.props.nums[die2],\r\n\t\t\t\tisClicked: false\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"RollDice\">\r\n\t\t\t\t<div className=\"RollDice-flexbox\">\r\n\t\t\t\t\t<Die number={this.state.die1} isClicked={this.state.isClicked} />\r\n\t\t\t\t\t<Die number={this.state.die2} isClicked={this.state.isClicked} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{!this.state.isMatched && (\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t\t\tclassName=\"RollDice-myButton\"\r\n\t\t\t\t\t\tdisabled={this.state.isClicked}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{this.state.isClicked ? 'Rolling...' : 'Click to Roll'}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t)}\r\n\t\t\t\t{this.state.isMatched && <h1>Congrats there is a match</h1>}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport RollDice from './components/RollDice';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<RollDice />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}